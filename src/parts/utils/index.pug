-
    // Filter out `false` class names
    // 
    // eg:
    //
    //  div(class=classNames([ "top-bar", isDark && "top-bar--dark", hasPadding && "top-bar--padding" ]))
    //
    // or
    //
    // div(class=classNames("top-bar", isDark && "top-bar--dark", hasPadding && "top-bar--padding"))
    //
    function classNames() {
        if (arguments.length === 0) return "";
        if (arguments.length === 1) {
            if (typeof arguments[0] === 'string') return arguments[0];
            else return _classNames(arguments[0]);
        }
        return _classNames(arguments);
    }
    function _classNames(array) {
        if (!Array.isArray(array)) array = Array.from(array);
        return array.filter(x => x !== false).join(" ")
    }

    // Bad practic bacause of WTF is going on
    //
    // bemClass('btn', { --dark: isDarkFlag }) -> 'btn--dark'
    function bemClass(baseClassName, optClassMap, additionalClasses) {
        let output = [ baseClassName ];
        for (const [ classPart, opt ] of Object.entries(optClassMap)) {
            if (opt) output.push(`${baseClassName}${classPart}`);
        }
        output.push(classNames(additionalClasses));
        return output.join(' ');
    }

    // Monkey patch for `flags.has('dark')`
    Array.prototype.has = Array.prototype.includes;

    // Map to dev uploads for dev builds
    function assetUrl(url) {
        if (process.env.BUILD === 'prod') return url;
        if (
            url.startsWith('/assets/') ||
            url.startsWith('assets/') ||
            url.startsWith('http://') ||
            url.startsWith('https://')
        ) return url;

        if (!url.startsWith('/')) url = '/' + url;
        // dev build & path not to assets
        return `http://dev.berezadev.com${url}`;
    }

//- Load css lazily with noscript fallback
//- eg:
//-
//- +linkLazyCSS("https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400|Ubuntu:300,500&amp;subset=cyrillic")
//- +linkLazyCSS("assets/css/fontawesome-all.min.css")
mixin linkLazyCSS(href)
    link(
        href=href,
        rel="stylesheet",
        media="none",
        onload="if(media!='all')media='all'"
    )&attributes(attributes)
    noscript
        link(href=href, rel="stylesheet")&attributes(attributes)

//- do not base on this mixin, it's only a shorthand for [section & .section-content]
mixin section(class_, contentAttributes={})
    section(class=class_)&attributes(attributes)
        if block
            .section-content&attributes(contentAttributes)
                block
                